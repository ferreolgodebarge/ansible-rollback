from ansible import context
from ansible.module_utils.common.collections import ImmutableDict


def set_context(
    playbook_path,
    inventory_path, 
    verbosity=0,
    ask_pass=False,
    private_key_file=None,
    remote_user=None,
    connection='smart',
    timeout=10, 
    ssh_common_args='',
    sftp_extra_args='',
    scp_extra_args='',
    ssh_extra_args='',
    force_handlers=False,
    flush_cache=None, 
    become=False,
    become_method='sudo',
    become_user=None, 
    become_ask_pass=False,
    tags=(),
    skip_tags=(), 
    check=False,
    syntax=None,
    diff=False, 
    listhosts=None,
    subset=None,
    extra_vars=(), 
    ask_vault_pass=False,
    vault_password_files=(), 
    vault_ids=(),
    forks=5,
    module_path=None,
    listtasks=None,
    listtags=None,
    step=None, 
    start_at_task=None,
):
    context.CLIARGS = ImmutableDict({
        'verbosity': verbosity,
        'ask_pass': ask_pass,
        'private_key_file': private_key_file,
        'remote_user': remote_user,
        'connection': 'connection',
        'timeout': timeout, 
        'ssh_common_args': ssh_common_args,
        'sftp_extra_args': sftp_extra_args,
        'scp_extra_args': scp_extra_args,
        'ssh_extra_args': ssh_extra_args,
        'force_handlers': force_handlers,
        'flush_cache': flush_cache, 
        'become': become,
        'become_method': become_method,
        'become_user': become_user, 
        'become_ask_pass': become_ask_pass,
        'tags': tags,
        'skip_tags': skip_tags, 
        'check': check,
        'syntax': syntax,
        'diff': diff, 
        'inventory': inventory_path, 
        'listhosts': listhosts,
        'subset': subset,
        'extra_vars': extra_vars, 
        'ask_vault_pass': ask_vault_pass,
        'vault_password_files': vault_password_files, 
        'vault_ids': vault_ids,
        'forks': forks,
        'module_path': module_path,
        'listtasks': listtasks,
        'listtags': listtags,
        'step': step, 
        'start_at_task': start_at_task,
        'args': playbook_path,
    })